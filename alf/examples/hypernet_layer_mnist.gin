import alf.algorithms.hypernetwork_layer_algorithm

# dataset config
create_dataset.dataset_name='mnist_inlier'
create_dataset.train_batch_size=50
create_dataset.test_batch_size=100

# Lenet for MNIST
CONV_LAYER_PARAMS = ((6, 5, 1, 2, 2), (16, 5, 1, 0, 2), (120, 5, 1))
# CONV_LAYER_PARAMS = ((6, 5, 1, 2, 4), (16, 5, 1, 0))
FC_LAYER_PARAMS = ((84, True), )
# FC_LAYER_PARAMS = ((144, True), )
HIDDEN_LAYERS = (128,512)

hypernet/Adam.lr=1e-4
hypernet/Adam.weight_decay=1e-5
hypernet_critic/Adam.lr=1e-3
hypernet_critic/Adam.weight_decay=1e-4

# algorithm config
HyperNetwork.conv_layer_params = %CONV_LAYER_PARAMS
HyperNetwork.fc_layer_params=%FC_LAYER_PARAMS
HyperNetwork.hidden_layers=%HIDDEN_LAYERS
HyperNetwork.num_particles=10
HyperNetwork.noise_dim=64

HyperNetwork.parameterization = 'network'
HyperNetwork.par_vi = 'svgd3'
HyperNetwork.loss_type = 'classification'
HyperNetwork.function_vi = False
HyperNetwork.functional_gradient = True
HyperNetwork.use_pinverse = True
HyperNetwork.use_jac_regularization = False
HyperNetwork.square_jac = False
HyperNetwork.pinverse_resolve = False
HyperNetwork.pinverse_use_eps = True
HyperNetwork.pinverse_solve_iters = 1
HyperNetwork.function_bs = 50
HyperNetwork.optimizer=@hypernet/Adam()
HyperNetwork.critic_optimizer=@hypernet_critic/Adam()
HyperNetwork.critic_hidden_layers=(100,100)
HyperNetwork.logging_training=True
HyperNetwork.logging_evaluate=True

import alf.networks.param_networks
ParamConvNet.use_bias=True

import alf.algorithms.hypernetwork_layer_generator
ParamLayers.use_bias=True

# training config
TrainerConfig.algorithm_ctor=@HyperNetwork
TrainerConfig.num_epochs=300
TrainerConfig.num_checkpoints=1
TrainerConfig.evaluate=True
TrainerConfig.eval_uncertainty=True
TrainerConfig.eval_interval=1
TrainerConfig.summary_interval=1
TrainerConfig.debug_summaries=True
TrainerConfig.summarize_grads_and_vars=True


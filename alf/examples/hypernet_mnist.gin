<<<<<<< HEAD
import alf.algorithms.hypernetwork_layer_algorithm
#import alf.algorithms.hypernetwork_algorithm
=======
import alf.algorithms.hypernetwork_algorithm
>>>>>>> 48fe04a0e6d09d6894d409a5668394b65ad1329c

# dataset config
create_dataset.dataset_name='mnist'
create_dataset.train_batch_size=50
create_dataset.test_batch_size=100

# Lenet for MNIST
CONV_LAYER_PARAMS=((6, 5, 1, 2, 2), (16, 5, 1, 0, 2), (120, 5, 1))
FC_LAYER_PARAMS = ((84, True), )
HIDDEN_LAYERS = (512, 1024)

hypernet/Adam.lr=1e-4
hypernet/Adam.weight_decay=1e-4

# algorithm config
HyperNetwork.conv_layer_params=%CONV_LAYER_PARAMS
HyperNetwork.fc_layer_params=%FC_LAYER_PARAMS
HyperNetwork.hidden_layers=%HIDDEN_LAYERS
HyperNetwork.particles=10
HyperNetwork.noise_dim=256
<<<<<<< HEAD
HyperNetwork.kernel_sharpness=.1
HyperNetwork.par_vi = 'gfsf'
HyperNetwork.loss_type = 'classification'
HyperNetwork.optimizer=@hypernet/Adam()

HyperNetwork.parameterization = 'layer'
#HyperNetwork.parameterization = 'network'
=======
HyperNetwork.par_vi = 'svgd'
HyperNetwork.loss_type = 'classification'
HyperNetwork.optimizer=@hypernet/Adam()
HyperNetwork.logging_training=True
HyperNetwork.logging_evaluate=True
>>>>>>> 48fe04a0e6d09d6894d409a5668394b65ad1329c

import alf.algorithms.hypernetwork_networks
ParamConvNet.use_bias=True

<<<<<<< HEAD
import alf.algorithms.hypernetwork_layer_generator
ParamLayers.use_bias=True

# training config
Config.algorithm_ctor=@HyperNetwork
Config.epochs=1000
Config.summarize_grads_and_vars=True
Config.evaluate=True
=======
# training config
TrainerConfig.algorithm_ctor=@HyperNetwork
TrainerConfig.num_epochs=1000
TrainerConfig.num_checkpoints=2
TrainerConfig.evaluate=True
TrainerConfig.eval_interval=1
TrainerConfig.summary_interval=1
TrainerConfig.debug_summaries=True
TrainerConfig.summarize_grads_and_vars=True





>>>>>>> 48fe04a0e6d09d6894d409a5668394b65ad1329c


import alf.algorithms.hypernetwork_fisher_algorithm
#import alf.algorithms.hypernetwork_algorithm

# dataset config
create_dataset.dataset_name='mnist'
create_dataset.train_batch_size=50
create_dataset.test_batch_size=100

# Lenet for MNIST
CONV_LAYER_PARAMS=((6, 5, 1, 2, 2), (16, 5, 1, 0, 2), (120, 5, 1))
FC_LAYER_PARAMS = ((84, True), )
HIDDEN_LAYERS = (32, 32)

hypernet/Adam.lr=1e-4
hypernet/Adam.weight_decay=1e-4

# algorithm config
HyperNetworkFisher.conv_layer_params=%CONV_LAYER_PARAMS
HyperNetworkFisher.fc_layer_params=%FC_LAYER_PARAMS
HyperNetworkFisher.hidden_layers=%HIDDEN_LAYERS
HyperNetworkFisher.particles=10
HyperNetworkFisher.noise_dim=256
HyperNetworkFisher.kernel_sharpness=.1
HyperNetworkFisher.loss_type = 'classification'
HyperNetworkFisher.optimizer=@hypernet/Adam()

HyperNetworkFisher.parameterization = 'layer'
#HyperNetwork.parameterization = 'network'

import alf.algorithms.hypernetwork_networks
ParamConvNet.use_bias=True

import alf.algorithms.hypernetwork_layer_generator
ParamLayers.use_bias=True

# training config
Config.algorithm_ctor=@HyperNetworkFisher
Config.epochs=1000
Config.summarize_grads_and_vars=True
Config.evaluate=True
Config.d_iters=5
Config.g_iters=1
